// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x", "native"]
  // output        = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // id                           Int       @id @default(autoincrement())
  id                              String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // id                String    @id @unique @default(uuid())
  fullName                        String                @db.VarChar(255)
  username                        String                @unique @db.VarChar(255)
  email                           String                @unique @db.VarChar(255)
  password                        String                @db.VarChar(255)
  phoneNumber                     String                @db.VarChar(255)
  gender                          Gender
  role                            Role?                 @default(user)
  maritalStatus                   MaritalStatus?
  pushNotificationId              String?               @db.VarChar(255)
  businessName                    String?               @db.VarChar(255)
  dob                             DateTime?
  avatar                          String?               @db.VarChar(255)
  address                         String                @db.VarChar(255)
  stateOfOrigin                   String                @db.VarChar(255)
  referralCode                    String?               @unique @db.VarChar(255)
  inviteCode                      String?               @db.VarChar(255)
  status                          AccountStatus?        @default(pending)
  invitedUsersCount               Int?                  @default(0)
  is_email_verified               Boolean?              @default(false)
  email_verified_at               DateTime?
  email_verification_token        String?               @db.VarChar(255)
  email_verification_token_expiry DateTime?
  password_reset_token            String?               @unique @db.VarChar(255)
  password_reset_token_expires_at DateTime?
  created_at                      DateTime              @default(now())
  update_at                       DateTime?             @updatedAt
  deleted_at                      DateTime?
  posts                           Post[]
  post_comment                    PostComment[]
  post_likes                      PostLikes[]
  marketPlace                     marketPlace[]
  Event                           Event[]
  marketPlaceComment              marketPlaceComment[]
  newbieCorner                    NewbieCorner[]
  NotificationSettings            NotificationSettings?

  @@map("Users")
}

model Post {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  body             String?         @db.VarChar(1000)
  user             User?           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id          String?         @db.Uuid
  post_type        PostType?
  category         PostCategories? @relation(fields: [post_category_id], references: [id])
  post_category_id String?         @db.Uuid
  images           String[]
  tags             String[]
  location         String?
  isApproved       Boolean?        @default(false)
  isAnonymous      Boolean?        @default(false)
  created_at       DateTime        @default(now())
  update_at        DateTime?       @updatedAt
  deleted_at       DateTime?
  post_comment     PostComment[]
  post_likes       PostLikes[]

  @@map("Posts")
}

model PostComment {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  body                String               @db.VarChar(255)
  user                User?                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id             String?              @db.Uuid
  Post                Post?                @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post_id             String?              @db.Uuid
  type                CommentType?
  created_at          DateTime             @default(now())
  update_at           DateTime?            @updatedAt
  deleted_at          DateTime?
  parent_post_comment ParentChildComment[] @relation("parent_post_comment")
  child_post_comment  ParentChildComment[] @relation("child_post_comment")

  @@map("Post_Comments")
}

model PostCategories {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  update_at  DateTime? @updatedAt
  deleted_at DateTime?
  Post       Post[]

  @@map("post_categories")
}

model PostLikes {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id    String?   @db.Uuid
  Post       Post?     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post_id    String?   @db.Uuid
  created_at DateTime  @default(now())
  update_at  DateTime? @updatedAt
  deleted_at DateTime?

  @@map("post_likes")
}

model ParentChildComment {
  id                             String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parent_post_comment            PostComment?        @relation(fields: [parent_post_comment_id], references: [id], "parent_post_comment", onDelete: Cascade, onUpdate: Cascade)
  parent_post_comment_id         String?             @db.Uuid
  child_post_comment             PostComment?        @relation(fields: [child_post_comment_id], references: [id], "child_post_comment", onDelete: Cascade, onUpdate: Cascade)
  child_post_comment_id          String?             @db.Uuid
  created_at                     DateTime            @default(now())
  updated_at                     DateTime?           @updatedAt
  deleted_at                     DateTime?
  parent_market_place_comment    marketPlaceComment? @relation(fields: [parent_market_place_comment_id], "parent_market_place_comment", references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent_market_place_comment_id String?             @db.Uuid
  child_market_place_comment     marketPlaceComment? @relation(fields: [child_market_place_comment_id], "child_market_place_comment", references: [id], onDelete: Cascade, onUpdate: Cascade)
  child_market_place_comment_id  String?             @db.Uuid

  @@map("parent_child_comments")
}

model MarketPlaceCategories {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
  deleted_at  DateTime?
  marketPlace marketPlace[]

  @@map("MarketPlaceCategories")
}

model marketPlace {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String                 @db.VarChar(255)
  location                String?                @db.VarChar(255)
  user                    User?                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id                 String?                @db.Uuid
  marketplace_category    MarketPlaceCategories? @relation(fields: [marketplace_category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  marketplace_category_id String?                @db.Uuid
  description             String?                @db.VarChar(255)
  photos                  String[]
  amount                  Float?                 @db.DoublePrecision
  created_at              DateTime               @default(now())
  updated_at              DateTime?              @updatedAt
  deleted_at              DateTime?
  marketPlaceComment      marketPlaceComment[]

  @@map("marketPlace")
}

model marketPlaceComment {
  id                          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  body                        String               @db.VarChar(255)
  user                        User?                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id                     String?              @db.Uuid
  marketPlace                 marketPlace?         @relation(fields: [marketPlaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  marketPlaceId               String?              @db.Uuid
  type                        CommentType?
  created_at                  DateTime             @default(now())
  update_at                   DateTime?            @updatedAt
  deleted_at                  DateTime?
  parent_market_place_comment ParentChildComment[] @relation("parent_market_place_comment")
  child_market_place_comment  ParentChildComment[] @relation("child_market_place_comment")

  @@map("marketPlace_Comments")
}

model Event {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String    @db.VarChar(255)
  location    String?   @db.VarChar(255)
  description String?   @db.VarChar(255)
  user_id     String?   @db.Uuid
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photo       String?   @db.VarChar(255)
  date        String?   @db.VarChar(255)
  time        String    @db.VarChar(255)
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  deleted_at  DateTime?

  @@map("events")
}

model NewbieCorner {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  heading           String          @db.VarChar(255)
  body              String          @db.VarChar(1000)
  user              User?           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id           String?         @db.Uuid
  newbieTag         NewbieTag[]     
  article_position  Int?            @unique
  created_at        DateTime        @default(now())
  updated_at        DateTime?       @updatedAt
  deleted_at        DateTime?

  
  @@map("NewbieCorner")
}

model NewbieTag {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  created_at      DateTime     @default(now())
  update_at       DateTime?    @updatedAt
  deleted_at      DateTime?
  NewbieCorner    NewbieCorner[] 

  @@map("newbieTag")
}
 
model NotificationSettings {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                 User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId               String?   @unique @db.Uuid
  newbieCornerArticles Boolean   @default(false)
  events               Boolean   @default(false)
  marketPlace          Boolean   @default(false)
  postFeed             Boolean   @default(false)
  directMessages       Boolean   @default(false)
  created_at           DateTime  @default(now())
  updated_at           DateTime? @updatedAt
  deleted_at           DateTime?

  @@map("notification_settings")
}

enum Gender {
  male
  female
}

enum PostType {
  image
  text
  text_image
}

enum CommentType {
  mainComment
  subComment
}

enum MaritalStatus {
  single
  married
  divorced
  widowed
}

enum AccountStatus {
  pending
  verified
}

enum Role {
  admin
  user
  exclusive_user
}
